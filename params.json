{"name":"Alphonse","tagline":"Simple rails deployment gem","body":"# Alphonse\r\n\r\nDeploy like the fonz with this simple deployment gem.\r\n\r\n## Installation\r\n\r\n1. Either `gem install alphonse` or add it to your Gemfile `gem \"alphonse\", \"~> 0.0.5\"`.\r\n2. Navigate to the directory in which you wish to use alphonse.\r\n3. Run `alphonse init` - this will generate the default Fonzfile.\r\n4. Edit the Fonzfile to suit your app and deployment operations required.\r\n\r\n## Usage\r\n\r\nOnce you have finished optmising the Fonzfile with the specific operations configurations, run the operations using `alphonse [OPERATION] [OPTIONS]`:\r\n\r\n`alphonse setup`\r\n`alphonse deploy -e staging` (the environment will be used when running rake tasks)\r\n`alphonse update --verbose` (verbose will return the output of each command irrelevant of success or failure)\r\n\r\n### Task\r\n\r\nA Task is a set of simple commands that are to be run in sequence. For example, the preset :clone_repository action consists of the following commands used to clone a git repository:\r\n  \r\n  `\"git checkout master -q\", \"git pull origin master -q\", \"git gc --aggressive\"`\r\n\r\n### Operation\r\n\r\nAn Operation is in turn a collection of Tasks which are run in sequence. For example, the present :deploy operation consists of the following Tasks which could be considered necessary for a Rails app deployment\r\n\r\n  ```ruby\r\n  :install_gems, :setup_database, :restart_app\r\n  ```\r\n\r\n### Example Fonzfile\r\n\r\n  ```ruby\r\n  # Settings\r\n  user 'remote_user'\r\n  app_name 'application_name'\r\n  hosts 'stage.example.com'\r\n  path \"/fullpath/to/folder\"\r\n  git_repo 'git@gitaddress:application_name.git'\r\n  branch 'master'\r\n  ruby_bin_path '/path/to/ruby/'\r\n  start_command 'start_app command' \r\n  restart_command 'restart_app command' # E.g. 'touch tmp/restart.txt'\r\n\r\n  operation :setup, 'Setup server' do\r\n    tasks :setup_directory\r\n  end\r\n\r\n  operation :deploy, 'Deploy repository' do\r\n    tasks :clone_repository, :install_gems, :setup_database, :start_app\r\n  end\r\n\r\n  operation :update, 'Update the repository on the server' do\r\n    tasks :update_repository, :install_gems, :update_database, :restart_app\r\n  end\r\n\r\n  operation :restart, 'Restart application' do\r\n    tasks :restart_app\r\n  end\r\n  ```\r\n\r\n## Note\r\n\r\nChances are you will experience issues with PATH variables and rubygems etc. So here's a quick solution:\r\n\r\nLog in to your server, as a root user, add the following line to /etc/ssh/sshd_config:\r\n\r\n    PermitUserEnvironment yes\r\n\r\nDon’t forget to restart ssh:\r\n\r\n    /etc/init.d/ssh restart\r\n\r\nNow, log in as the deployment user, and create ‘~/.ssh/environment’ with the following content:\r\n\r\n    PATH=/usr/local/rvm/gems/ruby-2.0.0-p247/bin:/bin:/usr/local/rvm/rubies/ruby-2.0.0-p247/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\r\n    GEM_HOME=/usr/local/rvm/gems/ruby-2.0.0-p247\r\n\r\n*The above paths are for your reference only, obviously you need to work them out for your server environment. The only thing you need to make sure is that the GEM_HOME's path matches one from the PATH.*\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n![May the Fonz be with you](http://lovablelabelsblog.com/wp-content/uploads/2010/03/fonz1.jpg)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}